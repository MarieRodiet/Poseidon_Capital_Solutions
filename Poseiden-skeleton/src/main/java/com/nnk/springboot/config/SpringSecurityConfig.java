package com.nnk.springboot.config;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.autoconfigure.security.servlet.PathRequest;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.config.Customizer;
import org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.security.web.SecurityFilterChain;

/**
 * The SpringSecurityConfig class configures Spring Security settings for the application.
 * It defines security rules, authentication mechanisms, and access permissions for different endpoints.
 *
 * @author Marie Moore
 */
@Configuration
@EnableWebSecurity
public class SpringSecurityConfig {

    /**
     * The custom user details service for retrieving user information.
     */
    @Autowired
    private CustomUserDetailsService customUserDetailsService;

    /**
     * Configures the security filter chain for the application.
     *
     * @param http the HttpSecurity object to configure
     * @return the configured SecurityFilterChain
     * @throws Exception if an error occurs during configuration
     */
    @Bean
    public SecurityFilterChain filterChain(HttpSecurity http) throws Exception {
        http
                .csrf(csrf -> csrf.disable())
                .headers((headers) ->
                        headers
                                .frameOptions((frameOptions) -> frameOptions.sameOrigin().disable()))
                .authorizeHttpRequests((authorize) ->
                        authorize
                                .requestMatchers(PathRequest.toStaticResources().atCommonLocations()).permitAll()
                                .requestMatchers("/h2-console/**").permitAll()
                                .requestMatchers("/user/**").hasRole("ADMIN")
                                .requestMatchers("/bidList/**").hasAnyRole("USER", "ADMIN")
                                .requestMatchers("/curvePoint/**").hasAnyRole("USER", "ADMIN")
                                .requestMatchers("/admin/home").hasAnyRole("USER", "ADMIN")
                                .requestMatchers("/rating/**").hasAnyRole("USER", "ADMIN")
                                .requestMatchers("/ruleName/**").hasAnyRole("USER", "ADMIN")
                                .requestMatchers("/trade/**").hasAnyRole("USER", "ADMIN")
                                .anyRequest().authenticated()



                ).formLogin(form -> form
                                .defaultSuccessUrl("/bidList/list", true)
                                //a login form will be automatically generated by spring security
                                .isCustomLoginPage()
                )


                .oauth2Login(Customizer.withDefaults())

                .logout(
                        logout -> logout
                                .logoutUrl("/logout")
                                .deleteCookies("JSESSIONID")
                                .clearAuthentication(true)
                                .logoutSuccessUrl("/login.html")
                                .invalidateHttpSession(true)
                );
        return http.build();
    }

    @Bean
    public static PasswordEncoder passwordEncoder(){
        return new BCryptPasswordEncoder();
    }

    @Bean
    public AuthenticationManager authenticationManager(HttpSecurity http, BCryptPasswordEncoder bCryptPasswordEncoder) throws Exception {
        AuthenticationManagerBuilder authenticationManagerBuilder = http.getSharedObject(AuthenticationManagerBuilder.class);
        authenticationManagerBuilder.userDetailsService(customUserDetailsService).passwordEncoder(bCryptPasswordEncoder);
        return authenticationManagerBuilder.build();
    }

}
